#!/usr/bin/env ruby

require "bundler/setup"
require "commander/import"
require "carthage_cache"

PROGRAM_NAME = 'carthage_cache'

program :name, PROGRAM_NAME
program :version, CarthageCache::VERSION
program :description, CarthageCache::DESCRIPTION

verbose = false
aws_s3_config = {
  bucket_name: "carthage-cache",
  aws_s3_client_options: {
    region: ENV['AWS_REGION'],
    access_key_id: ENV['AWS_ACCESS_KEY_ID'],
    secret_access_key: ENV['AWS_SECRET_ACCESS_KEY']
  }
}
global_option('-b', '--bucket-name BUCKET_NAME', 'Set Amazon S3 bucket to be used to store cache archives') do |bucket_name|
  aws_s3_config[:bucket_name] = aws_access_key_id
end
global_option('--verbose') { verbose = true }

# TODO load ./.carthage_cache.yml for configuration

command :exist do |c|
  c.syntax = "#{PROGRAM_NAME} exist [PROJECT_PATH]"
  c.description = 'Checks if a cache archive exists for the current Cartfile.resolved'
  c.action do |args, options|
    app = CarthageCache::Application.new(args.first || ".", verbose, aws_s3_config)
    if app.archive_exist?
      ENV['CARTHAGE_CACHE_EXIST'] = 1
      puts "There is a cached archive for the current Cartfile.resolved file."
    else
      ENV['CARTHAGE_CACHE_EXIST'] = 0
      puts "No cached archive available for the current Cartfile.resolved file."
      puts "You should probably run 'carthage bootstrap'."
    end
  end
end

command :install do |c|
  c.syntax = "#{PROGRAM_NAME} install [PROJECT_PATH]"
  c.description = 'Installs the cache archive for the current Cartfile.resolved'
  c.action do |args, options|
    app = CarthageCache::Application.new(args.first || ".", verbose, aws_s3_config)
    app.install_archive
  end
end

command :publish do |c|
  c.syntax = "#{PROGRAM_NAME} publish [PROJECT_PATH]"
  c.description = 'Generates and uploads the cache archive for the current Cartfile.resolved'
  c.option '-f-', '--force', 'Forces to create a new archive even if an archive already exist.'
  c.action do |args, options|
    options.default force: false
    app = CarthageCache::Application.new(args.first || ".", verbose, aws_s3_config)
    app.create_archive(options.force)
  end
end
